// RUN: %O/run arith_constant_2 2>&1 | @mlir-opt | @filecheck %M/arith_constant_2.mlir --check-prefix=CHECK_CAN

extern crate mlir;

use crate::common::*;

use mlir::attributes::integer::Integer as IntegerAttr;
use mlir::dialects::IROperation;
use mlir::dialects::arith::Constant;
use mlir::dialects::func::Return;
use mlir::ir::Block;
use mlir::types::IRType;
use mlir::types::integer::Integer as IntegerType;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let t = IntegerType::new(&context, 8);
    let f = get_empty_test_fn(&context, &[], &[t.as_type()]);
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let attr = IntegerAttr::new(&t, -3);
    let mut op_const = Constant::new_integer(&attr, &loc).as_operation();
    let mut op_ret = Return::new(&f, &[op_const.get_result(0)], &loc).as_operation();
    f_block.append_operation(&mut op_const);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    module.as_operation().dump();
    Ok(())
}
