// RUN: %O/run affine_if_1 2>&1 | @mlir-opt --canonicalize | @filecheck %M/affine_if_1.mlir --check-prefix=CHECK_CAN
// COM: No dialect handle for affine is exposed, so make sure to load all available dialects before
// COM: constructing operations from the affine dialect namespace.

extern crate mlir;

use crate::common::*;

use mlir::attributes::specialized::NamedSymbolRef;
use mlir::dialects::affine::Apply;
use mlir::dialects::affine::Binary as AffineBinop;
use mlir::dialects::affine::Constant as AffineConstant;
use mlir::dialects::affine::Dim as AffineDim;
use mlir::dialects::affine::If;
use mlir::dialects::affine::IExpr;
use mlir::dialects::affine::Map as AffineMap;
use mlir::dialects::affine::Set as AffineSet;
use mlir::dialects::affine::Symbol as AffineSymbol;
use mlir::dialects::affine::Yield;
use mlir::dialects::func::Call;
use mlir::dialects::func::Callee;
use mlir::dialects::func::Return;
use mlir::dialects::IOperation;
use mlir::ir::Block;
use mlir::types::IType;
use mlir::types::index::Index;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let mut context = module.get_context();
    context.load_all_available_dialects();
    let loc = context.get_unknown_location();
    let t = Index::new(&context).as_type();
    let f = get_empty_test_fn(&context, &[t.clone(), t.clone(), t.clone()], &[]);
    let f_bb = get_private_fn(&context, "black_box", &[t.clone()], &[], None, None);
    let c9 = AffineConstant::new(&context, 9).as_expr();
    let c10 = AffineConstant::new(&context, 10).as_expr();
    let d0 = AffineDim::new(&context, 0).as_expr();
    let d1 = AffineDim::new(&context, 1).as_expr();
    let s0 = AffineSymbol::new(&context, 0).as_expr();
    let b0 = AffineBinop::new_sub(d0, c10).as_expr();
    let b1 = AffineBinop::new_sub(s0, d0).as_expr();
    let b2 = AffineBinop::new_sub(b1, c9).as_expr();
    let b3 = AffineBinop::new_sub(d1, c10).as_expr();
    let b4 = AffineBinop::new_sub(s0, d1).as_expr();
    let b5 = AffineBinop::new_sub(b4, c9).as_expr();
    let set0 = AffineSet::new(&context, 2, 1, &[b0, b2, b3, b5], &[false, false, false, false]);
    let b6 = AffineBinop::new_sub(d0, c10).as_expr();
    let b7 = AffineBinop::new_add(b6, d1).as_expr();
    let b8 = AffineBinop::new_sub(b7, c10).as_expr();
    let map0 = AffineMap::new_results(&context, 2, 0, &[b8]);
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let mut op_apply = Apply::new(
        &context,
        map0,
        &[f_block.get_arg(1), f_block.get_arg(2)],
        &loc,
    )
    .as_operation();
    let callee = Callee::from_symbol_ref(&f_bb.get_symbol_ref());
    let mut op_call = Call::new(
        &callee,
        &[],
        &[op_apply.get_result(0)],
        &loc,
    )
    .as_operation();
    let op_if = If::new_if(
        &context,
        &[],
        &[f_block.get_arg(1), f_block.get_arg(2), f_block.get_arg(0)],
        set0,
        &loc,
    );
    let mut op_yield = Yield::new_if(
        &[],
        &op_if,
        &loc,
    )
    .as_operation();
    let region_if = op_if.as_operation().get_region(0);
    let mut block_if = region_if.iter().next().unwrap_or_default();
    block_if.append_operation(&mut op_apply);
    block_if.append_operation(&mut op_call);
    block_if.append_operation(&mut op_yield);
    let mut op_ret = Return::new(&f, &[], &loc).as_operation();
    f_block.append_operation(&mut op_if.as_operation());
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f_bb.as_operation());
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    module.as_operation().dump();
    Ok(())
}
