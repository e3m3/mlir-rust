// RUN: %O/run index_constant_1 | @mlir-opt | @filecheck %M/index_constant_1.mlir --check-prefix=CHECK_CAN
// COM: No dialect handle for index is exposed, so make sure to load all available dialects before
// COM: constructing operations from the index dialect namespace.

extern crate mlir;

use crate::common::*;

use mlir::attributes::specialized::NamedIndex;
use mlir::dialects::IOperation;
use mlir::dialects::func::Return;
use mlir::dialects::index::Constant;
use mlir::dialects::index::IndexValue;
use mlir::ir::Block;
use mlir::types::IType;
use mlir::types::index::Index;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let mut context = module.get_context();
    context.load_all_available_dialects();
    let loc = context.get_unknown_location();
    let t = Index::new(&context).as_type();
    let f = get_empty_test_fn(&context, &[], &[t]);
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let value = IndexValue::new(&context, 10);
    let mut op_const = Constant::new(&context, &value, &loc).as_operation();
    let mut op_ret = Return::new(&f, &[op_const.get_result(0)], &loc).as_operation();
    f_block.append_operation(&mut op_const);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    println!("{}", module);
    Ok(())
}
