// RUN: %O/run vector_load_2 2>&1 | @mlir-opt | @filecheck %M/vector_load_2.mlir --check-prefix=CHECK_CAN

extern crate mlir;


use crate::common::*;

use mlir::attributes::specialized::NamedBool;
use mlir::dialects::IROperation;
use mlir::dialects::common::DefaultMemorySpace;
use mlir::dialects::common::NonTemporal;
use mlir::dialects::func::Return;
use mlir::dialects::vector::Load;
use mlir::ir::Block;
use mlir::ir::ShapeImpl;
use mlir::types::IRType;
use mlir::types::float::Float as FloatType;
use mlir::types::float::Layout as FloatLayout;
use mlir::types::index::Index;
use mlir::types::memref::MemRef;
use mlir::types::vector::Vector;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let t = FloatType::new(&context, FloatLayout::F32).as_type();
    let t_index = Index::new(&context).as_type();
    let s_in = ShapeImpl::from(vec![100, 100]);
    let s_out = ShapeImpl::from(vec![8]);
    let t_mr_in = MemRef::new_contiguous(&s_in, &t, &DefaultMemorySpace::new()).as_type();
    let t_vec_out = Vector::new(&s_out, &t);
    let f = get_empty_test_fn(
        &context,
        &[t_mr_in.clone(), t_index.clone(), t_index.clone()],
        &[t_vec_out.as_type()],
    );
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let mut op_load = Load::new(
        &t_vec_out,
        &f_block.get_arg(0),
        &[f_block.get_arg(1), f_block.get_arg(2)],
        &NonTemporal::new(&context, false),
        &loc,
    )
    .as_operation();
    let mut op_ret = Return::new(&f, &[op_load.get_result(0)], &loc).as_operation();
    f_block.append_operation(&mut op_load);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    module.as_operation().dump();
    Ok(())
}
