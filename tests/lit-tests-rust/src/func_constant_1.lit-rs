// RUN: %O/run func_constant_1 2>&1 | @mlir-opt | @filecheck %M/func_constant_1.mlir --check-prefix=CHECK_CAN

extern crate mlir;

use crate::common::*;

use mlir::dialects::IROperation;
use mlir::dialects::func::Constant;
use mlir::dialects::func::Return;
use mlir::ir::Block;
use mlir::types::IRType;
use mlir::types::float::Float as FloatType;
use mlir::types::float::Layout as FloatLayout;
use mlir::types::function::Function as FunctionType;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let t = FloatType::new(&context, FloatLayout::F64).as_type();
    let t_callee_args = vec![t.clone(), t.clone()];
    let t_callee_result = vec![t.clone()];
    let f_callee = get_private_fn(
        &context,
        "callee",
        &t_callee_args,
        &t_callee_result,
        None,
        None,
    );
    let t_callee = FunctionType::new(&context, &t_callee_args, &t_callee_result);
    let f = get_empty_test_fn(&context, &[], &[t_callee.as_type()]);
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let mut op_constant = Constant::new(&f_callee, &loc).as_operation();
    let mut op_ret = Return::new(&f, &[op_constant.get_result(0)], &loc).as_operation();
    f_block.append_operation(&mut op_constant);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f_callee.as_operation());
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    module.as_operation().dump();
    Ok(())
}
