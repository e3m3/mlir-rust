// RUN: %O/tensor_collapse_shape_1 2>&1 | @mlir-opt | @filecheck %M/tensor_collapse_shape_1.mlir --check-prefix=CHECK_CAN

extern crate mlir;

use mlir::attributes::IRAttribute;
use mlir::attributes::array::Array;
use mlir::attributes::integer::Integer as IntegerAttr;
use mlir::dialects::IROperation;
use mlir::dialects::func::Return;
use mlir::dialects::tensor::CollapseShape;
use mlir::dialects::tensor::Reassociation;
use mlir::ir::Block;
use mlir::ir::ShapeImpl;
use mlir::types::IRType;
use mlir::types::float::Float as FloatType;
use mlir::types::float::Layout as FloatLayout;
use mlir::types::integer::Integer as IntegerType;
use mlir::types::ranked_tensor::RankedTensor;
use mlir::types::shaped::Shaped;

mod common;
use crate::common::*;

pub fn main() -> () {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let t_int = IntegerType::new(&context, 64);
    let t_float = FloatType::new(&context, FloatLayout::F32).as_type();
    let dyn_size = Shaped::dynamic_size();
    let s_in = ShapeImpl::from(vec![dyn_size, dyn_size, dyn_size]);
    let s_out = ShapeImpl::from(vec![dyn_size, dyn_size]);
    let t_tnsr_in = RankedTensor::new(&s_in, &t_float);
    let t_tnsr_out = RankedTensor::new(&s_out, &t_float);
    let f = get_empty_test_fn(&context, &[t_tnsr_in.as_type()], &[t_tnsr_out.as_type()]);
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let reassoc = Reassociation::new(&context, &[
        Array::new(&context, &[
            IntegerAttr::new(&t_int, 0).as_attribute(),
            IntegerAttr::new(&t_int, 1).as_attribute(),
        ]),
        Array::new(&context, &[IntegerAttr::new(&t_int, 2).as_attribute()]),
    ]);
    let mut op_cs =
        CollapseShape::new(&t_tnsr_out, &f_block.get_arg(0), &reassoc, &loc).as_operation();
    let mut op_ret = Return::new(&f, &[op_cs.get_result(0)], &loc).as_operation();
    f_block.append_operation(&mut op_cs);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    module.as_operation().dump();
}
