// RUN: %O/run linalg_transpose_2 2>&1 | @mlir-opt --canonicalize | @filecheck %M/linalg_transpose_2.mlir --check-prefix=CHECK_CAN

extern crate mlir;


use crate::common::*;

use mlir::attributes::specialized::NamedI64DenseArray;
use mlir::dialects::IROperation;
use mlir::dialects::common::DefaultMemorySpace;
use mlir::dialects::func::Return;
use mlir::dialects::linalg::Permutation;
use mlir::dialects::linalg::Transpose;
use mlir::dialects::memref::Alloc;
use mlir::ir::Block;
use mlir::ir::ShapeImpl;
use mlir::types::IRType;
use mlir::types::float::Float as FloatType;
use mlir::types::float::Layout as FloatLayout;
use mlir::types::memref::MemRef;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let s = ShapeImpl::from(vec![16, 64]);
    let s_out = s.transpose();
    let t_elem = FloatType::new(&context, FloatLayout::F32);
    let mem_space = DefaultMemorySpace::new();
    let t = MemRef::new_contiguous(&s, &t_elem.as_type(), &mem_space);
    let t_out = MemRef::new_contiguous(&s_out, &t_elem.as_type(), &mem_space);
    let f = get_empty_test_fn(&context, &[t.as_type()], &[t_out.as_type()]);
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let p = Permutation::new(&context, &[1, 0]);
    let mut op_alloc = Alloc::new(&t_out, &[], &[], None, &loc).as_operation();
    let mut op_transpose = Transpose::new_memref(
        &context,
        &f_block.get_arg(0),
        &op_alloc.get_result(0),
        &p,
        &loc,
    )
    .as_operation();
    let mut op_ret = Return::new(&f, &[op_alloc.get_result(0)], &loc).as_operation();
    f_block.append_operation(&mut op_alloc);
    f_block.append_operation(&mut op_transpose);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    module.as_operation().dump();
    Ok(())
}
