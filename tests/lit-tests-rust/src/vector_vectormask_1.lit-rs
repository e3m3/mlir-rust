// RUN: %O/vector_vectormask_1 2>&1 | @mlir-opt | @filecheck %M/vector_vectormask_1.mlir --check-prefix=CHECK_CAN

extern crate mlir;

use mlir::dialects::func::Return;
use mlir::dialects::IROperation;
use mlir::dialects::vector::VectorMask;
use mlir::ir::Block;
use mlir::ir::ShapeImpl;
use mlir::types::integer::Integer as IntegerType;
use mlir::types::IRType;
use mlir::types::vector::Vector;

mod common;
use crate::common::*;

pub fn main() -> () {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let t = IntegerType::new(&context, 1).as_type();
    let s_out = ShapeImpl::from(vec![4]);
    let t_vec_out = Vector::new(&s_out, &t);
    let f = get_empty_test_fn(
        &context,
        &[t.clone(), t.clone(), t.clone(), t.clone()],
        &[t_vec_out.as_type()],
    );
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let mut op_vectormask = VectorMask::new(
        &context,
        &[f_block.get_arg(0), f_block.get_arg(1), f_block.get_arg(2), f_block.get_arg(3)],
        &loc,
    ).as_operation();
    let mut op_ret = Return::new(&f, &[op_vectormask.get_result(0)], &loc).as_operation();
    f_block.append_operation(&mut op_vectormask);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    module.as_operation().dump();
}
