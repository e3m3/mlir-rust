// RUN: %O/run scf_if_1 | @mlir-opt --canonicalize | @filecheck %M/scf_if_1.mlir --check-prefix=CHECK_CAN

extern crate mlir;

use crate::common::*;

use mlir::attributes::specialized::NamedSymbolRef;
use mlir::dialects::IOperation;
use mlir::dialects::func::Call;
use mlir::dialects::func::Callee;
use mlir::dialects::func::Return;
use mlir::dialects::scf::If;
use mlir::dialects::scf::Yield;
use mlir::ir::Block;
use mlir::types::IType;
use mlir::types::integer::Integer as IntegerType;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let t_bool = IntegerType::new_bool(&context).as_type();
    let f = get_empty_test_fn(&context, &[t_bool.clone()], &[]);
    let f_bb = get_private_fn(&context, "black_box", &[], &[], None, None);
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let callee = Callee::from_symbol_ref(&f_bb.get_symbol_ref());
    let op_if = If::new_if(&context, &[], &f_block.get_arg(0), &loc);
    let region_if = op_if.get_region_then();
    let mut block_if = region_if.iter().next().unwrap_or_default();
    let mut op_call = Call::new(&callee, &[], &[], &loc).as_operation();
    let mut op_yield = Yield::new_if(&op_if, &[], &loc).as_operation();
    block_if.append_operation(&mut op_call);
    block_if.append_operation(&mut op_yield);
    let mut op_ret = Return::new(&f, &[], &loc).as_operation();
    f_block.append_operation(&mut op_if.as_operation());
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f_bb.as_operation());
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    println!("{}", module);
    Ok(())
}
