// RUN: %O/run memref_view_2 | @mlir-opt | @filecheck %M/memref_view_2.mlir --check-prefix=CHECK_CAN

extern crate mlir;

use crate::common::*;

use mlir::dialects::IOperation;
use mlir::dialects::common::DefaultMemorySpace;
use mlir::dialects::func::Return;
use mlir::dialects::memref::View;
use mlir::ir::Block;
use mlir::ir::ShapeImpl;
use mlir::types::IType;
use mlir::types::float::Float as FloatType;
use mlir::types::float::Layout as FloatLayout;
use mlir::types::index::Index;
use mlir::types::integer::Integer as IntegerType;
use mlir::types::memref::MemRef;
use mlir::types::shaped::Shaped;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let t_int = IntegerType::new(&context, 8).as_type();
    let t_float = FloatType::new(&context, FloatLayout::F32).as_type();
    let t_index = Index::new(&context).as_type();
    let dyn_size = Shaped::dynamic_size();
    let s_in = ShapeImpl::from(vec![2048]);
    let s_out = ShapeImpl::from(vec![dyn_size, 4, dyn_size]);
    let t_mr_in = MemRef::new_contiguous(&s_in, &t_int, &DefaultMemorySpace::new());
    let t_mr_out = MemRef::new_contiguous(&s_out, &t_float, &DefaultMemorySpace::new());
    let f = get_empty_test_fn(
        &context,
        &[
            t_mr_in.as_type(),
            t_index.clone(),
            t_index.clone(),
            t_index.clone(),
        ],
        &[t_mr_out.as_type()],
    );
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let mut op_view = View::new(
        &t_mr_out,
        &f_block.get_arg(0),
        &f_block.get_arg(1),
        &[f_block.get_arg(2), f_block.get_arg(3)],
        &loc,
    )
    .as_operation();
    let mut op_ret = Return::new(&f, &[op_view.get_result(0)], &loc).as_operation();
    f_block.append_operation(&mut op_view);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    println!("{}", module);
    Ok(())
}
