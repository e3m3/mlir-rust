// RUN: %O/run memref_global_5 2>&1 | @mlir-opt | @filecheck %M/memref_global_5.mlir --check-prefix=CHECK_CAN

extern crate mlir;

use crate::common::*;

use mlir::attributes::dense_elements::DenseElements;
use mlir::attributes::specialized::NamedInitialization;
use mlir::attributes::specialized::NamedString;
use mlir::attributes::specialized::NamedType;
use mlir::attributes::specialized::NamedUnit;
use mlir::dialects::IROperation;
use mlir::dialects::common::DefaultMemorySpace;
use mlir::dialects::common::SymbolName;
use mlir::dialects::common::SymbolVisibilityKind;
use mlir::dialects::func::Return;
use mlir::dialects::memref::Global;
use mlir::dialects::memref::GlobalType;
use mlir::dialects::memref::InitialValue;
use mlir::dialects::memref::IsConstant;
use mlir::ir::Block;
use mlir::ir::ShapeImpl;
use mlir::ir::StringBacked;
use mlir::types::IRType;
use mlir::types::integer::Integer as IntegerType;
use mlir::types::memref::MemRef;
use mlir::types::ranked_tensor::RankedTensor;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let t = IntegerType::new(&context, 32).as_type();
    let s_out = ShapeImpl::from(vec![2]);
    let t_mr_out = MemRef::new_contiguous(&s_out, &t, &DefaultMemorySpace::new());
    let t_tnsr_out = RankedTensor::new(&s_out, &t).as_shaped();
    let t_attr = GlobalType::new(&t_mr_out.as_type());
    let f = get_empty_test_fn(&context, &[], &[]);
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let f_name_global = StringBacked::from("c");
    let sym_name = SymbolName::new(&context, &f_name_global.as_string_ref());
    let attr_init =
        InitialValue::new_elements(&DenseElements::new_i32(&t_tnsr_out, &[1, 4]).as_elements());
    let is_const = IsConstant::new(&context);
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let mut op_global = Global::new(
        &t_attr,
        &sym_name,
        SymbolVisibilityKind::None,
        Some(&attr_init),
        Some(&is_const),
        None,
        &loc,
    )
    .as_operation();
    let mut op_ret = Return::new(&f, &[], &loc).as_operation();
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut op_global);
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    module.as_operation().dump();
    Ok(())
}
