// RUN: %O/run arith_truncf_3 | @mlir-opt | @filecheck %M/arith_truncf_3.mlir --check-prefix=CHECK_CAN

extern crate mlir;

use crate::common::*;

use mlir::dialects::IOperation;
use mlir::dialects::arith::FastMathFlags;
use mlir::dialects::arith::RoundingModeKind;
use mlir::dialects::arith::TruncF;
use mlir::dialects::func::Return;
use mlir::ir::Block;
use mlir::ir::ShapeImpl;
use mlir::types::IType;
use mlir::types::float::Float as FloatType;
use mlir::types::float::Layout as FloatLayout;
use mlir::types::ranked_tensor::RankedTensor;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let s = ShapeImpl::from(vec![10]);
    let t_src_elem = FloatType::new(&context, FloatLayout::F64).as_type();
    let t_dst_elem = FloatType::new(&context, FloatLayout::F16).as_type();
    let t_src = RankedTensor::new(&s, &t_src_elem).as_type();
    let t_dst = RankedTensor::new(&s, &t_dst_elem).as_type();
    let f = get_empty_test_fn(&context, &[t_src.clone()], &[t_dst.clone()]);
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let mut op_trunc = TruncF::new(
        &t_dst,
        &f_block.get_arg(0),
        Some(FastMathFlags::Fast.into()),
        Some(RoundingModeKind::Downward),
        &loc,
    )
    .as_operation();
    let mut op_ret = Return::new(&f, &[op_trunc.get_result(0)], &loc).as_operation();
    f_block.append_operation(&mut op_trunc);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    println!("{}", module);
    Ok(())
}
