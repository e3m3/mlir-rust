// RUN: %O/run tensor_from_elements_1 | @mlir-opt | @filecheck %M/tensor_from_elements_1.mlir --check-prefix=CHECK_CAN

extern crate mlir;

use crate::common::*;

use mlir::dialects::IOperation;
use mlir::dialects::func::Return;
use mlir::dialects::tensor::FromElements;
use mlir::ir::Block;
use mlir::ir::ShapeImpl;
use mlir::types::IType;
use mlir::types::index::Index;
use mlir::types::ranked_tensor::RankedTensor;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let t = Index::new(&context).as_type();
    let s_out = ShapeImpl::from(vec![2, 3]);
    let t_tnsr_out = RankedTensor::new(&s_out, &t);
    let f = get_empty_test_fn(
        &context,
        &[
            t.clone(),
            t.clone(),
            t.clone(),
            t.clone(),
            t.clone(),
            t.clone(),
        ],
        &[t_tnsr_out.as_type()],
    );
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let mut op_fe = FromElements::new(
        &t_tnsr_out,
        &[
            f_block.get_arg(0),
            f_block.get_arg(1),
            f_block.get_arg(2),
            f_block.get_arg(3),
            f_block.get_arg(4),
            f_block.get_arg(5),
        ],
        &loc,
    )
    .as_operation();
    let mut op_ret = Return::new(&f, &[op_fe.get_result(0)], &loc).as_operation();
    f_block.append_operation(&mut op_fe);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    println!("{}", module);
    Ok(())
}
