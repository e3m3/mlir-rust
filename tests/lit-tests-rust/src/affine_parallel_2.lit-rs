// RUN: %O/run affine_parallel_2 | @mlir-opt --canonicalize | @filecheck %M/affine_parallel_2.mlir --check-prefix=CHECK_CAN
// COM: No dialect handle for affine is exposed, so make sure to load all available dialects before
// COM: constructing operations from the affine dialect namespace.

extern crate mlir;

use crate::common::*;

use mlir::attributes::specialized::NamedSymbolRef;
use mlir::dialects::IOperation;
use mlir::dialects::affine::Binary as AffineBinop;
use mlir::dialects::affine::Constant as AffineConstant;
use mlir::dialects::affine::Dim as AffineDim;
use mlir::dialects::affine::IExpr;
use mlir::dialects::affine::Map as AffineMap;
use mlir::dialects::affine::Parallel;
use mlir::dialects::affine::Symbol as AffineSymbol;
use mlir::dialects::affine::Yield;
use mlir::dialects::func::Call;
use mlir::dialects::func::Callee;
use mlir::dialects::func::Return;
use mlir::ir::Block;
use mlir::types::IType;
use mlir::types::index::Index;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let mut context = module.get_context();
    context.load_all_available_dialects();
    let loc = context.get_unknown_location();
    let t = Index::new(&context).as_type();
    let f = get_empty_test_fn(&context, &[t.clone(), t.clone()], &[]);
    let f_bb = get_private_fn(
        &context,
        "black_box",
        &[t.clone(), t.clone()],
        &[],
        None,
        None,
    );
    let c0 = AffineConstant::new(&context, 0).as_expr();
    let c32 = AffineConstant::new(&context, 32).as_expr();
    let d0 = AffineDim::new(&context, 0).as_expr();
    let d1 = AffineDim::new(&context, 1).as_expr();
    let s0 = AffineSymbol::new(&context, 0).as_expr();
    let s1 = AffineSymbol::new(&context, 1).as_expr();
    let b0 = AffineBinop::new_add(d0, c32).as_expr();
    let b1 = AffineBinop::new_add(d1, c32).as_expr();
    let map0 = AffineMap::new_results(&context, 0, 0, &[c0]);
    let map1 = AffineMap::new_results(&context, 0, 2, &[s0]);
    let map2 = AffineMap::new_results(&context, 0, 2, &[s1]);
    let map3 = AffineMap::new_results(&context, 2, 0, &[d0]);
    let map4 = AffineMap::new_results(&context, 2, 0, &[d1]);
    let map5 = AffineMap::new_results(&context, 2, 2, &[b0, s0]);
    let map6 = AffineMap::new_results(&context, 2, 2, &[b1, s1]);
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let callee = Callee::from_symbol_ref(&f_bb.get_symbol_ref());
    let op_par_0 = Parallel::new(
        &context,
        &[],
        &[map0, map0],
        &[map1, map2],
        &[],
        &[f_block.get_arg(0), f_block.get_arg(1)],
        Some(&[32, 32]),
        &[],
        &loc,
    );
    let region_par_0 = op_par_0.as_operation().get_region(0);
    let mut block_par_0 = region_par_0.iter().next().unwrap_or_default();
    let op_par_1 = Parallel::new(
        &context,
        &[],
        &[map3, map4],
        &[map5, map6],
        &[block_par_0.get_arg(0), block_par_0.get_arg(1)],
        &[
            block_par_0.get_arg(0),
            block_par_0.get_arg(1),
            f_block.get_arg(0),
            f_block.get_arg(1),
        ],
        None,
        &[],
        &loc,
    );
    let region_par_1 = op_par_1.as_operation().get_region(0);
    let mut block_par_1 = region_par_1.iter().next().unwrap_or_default();
    let mut op_yield_1 = Yield::new_parallel(&op_par_1, &[], &loc).as_operation();
    let mut op_yield_0 = Yield::new_parallel(&op_par_0, &[], &loc).as_operation();
    let mut op_call = Call::new(
        &callee,
        &[],
        &[block_par_1.get_arg(0), block_par_1.get_arg(1)],
        &loc,
    )
    .as_operation();
    block_par_1.append_operation(&mut op_call);
    block_par_1.append_operation(&mut op_yield_1);
    block_par_0.append_operation(&mut op_par_1.as_operation());
    block_par_0.append_operation(&mut op_yield_0);
    let mut op_ret = Return::new(&f, &[], &loc).as_operation();
    f_block.append_operation(&mut op_par_0.as_operation());
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f_bb.as_operation());
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    println!("{}", module);
    Ok(())
}
