// RUN: %O/tensor_reshape_3 2>&1 | @mlir-opt --canonicalize | @filecheck %M/tensor_reshape_3.mlir --check-prefix=CHECK_CAN

extern crate mlir;

use mlir::dialects::IROperation;
use mlir::dialects::func::Return;
use mlir::dialects::tensor::Reshape;
use mlir::ir::Block;
use mlir::ir::ShapeImpl;
use mlir::types::IRType;
use mlir::types::float::Float as FloatType;
use mlir::types::float::Layout as FloatLayout;
use mlir::types::integer::Integer as IntegerType;
use mlir::types::ranked_tensor::RankedTensor;
use mlir::types::shaped::Shaped;
use mlir::types::unranked_tensor::UnrankedTensor;

mod common;
use crate::common::*;

pub fn main() -> () {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let t_int = IntegerType::new(&context, 32).as_type();
    let t_float = FloatType::new(&context, FloatLayout::F32).as_type();
    let s_shape = ShapeImpl::from(vec![1]);
    let s_out = ShapeImpl::from(vec![Shaped::dynamic_size()]);
    let t_tnsr_in = UnrankedTensor::new(&t_float);
    let t_tnsr_shape = RankedTensor::new(&s_shape, &t_int);
    let t_tnsr_out = RankedTensor::new(&s_out, &t_float);
    let f = get_empty_test_fn(&context, &[t_tnsr_in.as_type(), t_tnsr_shape.as_type()], &[
        t_tnsr_out.as_type(),
    ]);
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let mut op_reshape =
        Reshape::new_ranked(&t_tnsr_out, &f_block.get_arg(0), &f_block.get_arg(1), &loc)
            .as_operation();
    let mut op_ret = Return::new(&f, &[op_reshape.get_result(0)], &loc).as_operation();
    f_block.append_operation(&mut op_reshape);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    module.as_operation().dump();
}
