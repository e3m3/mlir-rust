// RUN: %O/run memref_transpose_1 2>&1 | @mlir-opt | @filecheck %M/memref_transpose_1.mlir --check-prefix=CHECK_CAN

extern crate mlir;


use crate::common::*;

use mlir::dialects::IROperation;
use mlir::dialects::affine::AffineExpr;
use mlir::dialects::affine::Binary as AffineBinop;
use mlir::dialects::affine::Dim as AffineDim;
use mlir::dialects::affine::Map as AffineMap;
use mlir::dialects::affine::Symbol as AffineSymbol;
use mlir::dialects::common::DefaultMemorySpace;
use mlir::dialects::common::MemoryLayout;
use mlir::dialects::func::Return;
use mlir::dialects::memref::Permutation;
use mlir::dialects::memref::Transpose;
use mlir::ir::Block;
use mlir::ir::Shape;
use mlir::ir::ShapeImpl;
use mlir::types::IRType;
use mlir::types::float::Float as FloatType;
use mlir::types::float::Layout as FloatLayout;
use mlir::types::memref::MemRef;
use mlir::types::shaped::Shaped;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let t = FloatType::new(&context, FloatLayout::F32).as_type();
    let dyn_size = Shaped::dynamic_size();
    let s_in = ShapeImpl::from(vec![dyn_size, dyn_size]);
    let affine_d0 = AffineDim::new(&context, 0).as_expr();
    let affine_d1 = AffineDim::new(&context, 1).as_expr();
    let affine_s0 = AffineSymbol::new(&context, 0).as_expr();
    let affine_expr0 = AffineBinop::new_mul(&affine_d1, &affine_s0).as_expr();
    let affine_expr1 = AffineBinop::new_add(&affine_expr0, &affine_d0).as_expr();
    let layout = MemoryLayout::from(AffineMap::new_results(&context, s_in.rank(), 1, &[
        affine_expr1,
    ]));
    let t_mr_in = MemRef::new_contiguous(&s_in, &t, &DefaultMemorySpace::new());
    let t_mr_out = MemRef::new(&s_in, &t, &layout, &DefaultMemorySpace::new());
    let f = get_empty_test_fn(&context, &[t_mr_in.as_type()], &[t_mr_out.as_type()]);
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let perm = Permutation::new(&context, &[1, 0]);
    let mut op_transpose =
        Transpose::new(&t_mr_out, &f_block.get_arg(0), &perm, &loc).as_operation();
    let mut op_ret = Return::new(&f, &[op_transpose.get_result(0)], &loc).as_operation();
    f_block.append_operation(&mut op_transpose);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    module.as_operation().dump();
    Ok(())
}
