// RUN: %O/run scf_execute_region_1 | @mlir-opt --canonicalize | @filecheck %M/scf_execute_region_1.mlir --check-prefix=CHECK_CAN

extern crate mlir;

use crate::common::*;

use mlir::attributes::specialized::NamedSymbolRef;
use mlir::dialects::IOperation;
use mlir::dialects::func::Call;
use mlir::dialects::func::Callee;
use mlir::dialects::func::Return;
use mlir::dialects::scf::ExecuteRegion;
use mlir::dialects::scf::For;
use mlir::dialects::scf::Yield;
use mlir::ir::Block;
use mlir::types::IType;
use mlir::types::index::Index;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let t = Index::new(&context).as_type();
    let f = get_empty_test_fn(&context, &[t.clone(), t.clone(), t.clone()], &[]);
    let f_bb = get_private_fn(&context, "black_box", &[t], &[], None, None);
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let callee = Callee::from_symbol_ref(&f_bb.get_symbol_ref());
    let op_for = For::new(
        &context,
        &[],
        &f_block.get_arg(0),
        &f_block.get_arg(1),
        &f_block.get_arg(2),
        &[],
        &loc,
    );
    let op_er = ExecuteRegion::new(&context, &[], &loc);
    let region_for = op_for.get_region();
    let mut region_er = op_er.get_region();
    let mut block_for = region_for.iter().next().unwrap_or_default();
    let mut block_er = Block::new_empty();
    let mut op_call = Call::new(&callee, &[], &[block_for.get_arg(0)], &loc).as_operation();
    let mut op_yield_0 = Yield::new_execute_region(&op_er, &[], &loc).as_operation();
    let mut op_yield_1 = Yield::new_for(&op_for, &[], &loc).as_operation();
    block_er.append_operation(&mut op_call);
    block_er.append_operation(&mut op_yield_0);
    block_for.append_operation(&mut op_er.as_operation());
    block_for.append_operation(&mut op_yield_1);
    region_er.append_block(&mut block_er);
    let mut op_ret = Return::new(&f, &[], &loc).as_operation();
    f_block.append_operation(&mut op_for.as_operation());
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f_bb.as_operation());
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    println!("{}", module);
    Ok(())
}
