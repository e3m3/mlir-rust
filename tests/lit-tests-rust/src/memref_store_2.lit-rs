// RUN: %O/run memref_store_2 2>&1 | @mlir-opt | @filecheck %M/memref_store_2.mlir --check-prefix=CHECK_CAN

extern crate mlir;

use crate::common::*;

use mlir::attributes::index::Index as IndexAttr;
use mlir::attributes::specialized::NamedBool;
use mlir::attributes::strided_layout::StridedLayout;
use mlir::dialects::IROperation;
use mlir::dialects::arith::Constant;
use mlir::dialects::common::IntegerMemorySpace;
use mlir::dialects::common::MemoryLayout;
use mlir::dialects::common::NonTemporal;
use mlir::dialects::func::Return;
use mlir::dialects::memref::Store;
use mlir::ir::Block;
use mlir::ir::ShapeImpl;
use mlir::types::IRType;
use mlir::types::float::Float as FloatType;
use mlir::types::float::Layout as FloatLayout;
use mlir::types::index::Index as IndexType;
use mlir::types::memref::MemRef;
use mlir::types::shaped::Shaped;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let t = FloatType::new(&context, FloatLayout::F32).as_type();
    let t_index = IndexType::new(&context).as_type();
    let dyn_size = Shaped::dynamic_size();
    let s_in = ShapeImpl::from(vec![4, dyn_size]);
    let layout = MemoryLayout::from(StridedLayout::new(&context, dyn_size, &[
        dyn_size, dyn_size,
    ]));
    let t_mr_in = MemRef::new(&s_in, &t, &layout, &IntegerMemorySpace::new(&context, 0));
    let f = get_empty_test_fn(&context, &[t_mr_in.as_type(), t_index, t.clone()], &[]);
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let index_j = IndexAttr::new(&context, 1023);
    let is_nt = NonTemporal::new(&context, true);
    let mut op_const = Constant::new_index(&index_j, &loc).as_operation();
    let mut op_store = Store::new(
        &context,
        &f_block.get_arg(2),
        &f_block.get_arg(0),
        &[f_block.get_arg(1), op_const.get_result(0)],
        &is_nt,
        &loc,
    )
    .as_operation();
    let mut op_ret = Return::new(&f, &[], &loc).as_operation();
    f_block.append_operation(&mut op_const);
    f_block.append_operation(&mut op_store);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    module.as_operation().dump();
    Ok(())
}
