// RUN: %O/run vector_transfer_write_4 2>&1 | @mlir-opt | @filecheck %M/vector_transfer_write_4.mlir --check-prefix=CHECK_CAN

extern crate mlir;

use crate::common::*;

use mlir::attributes::specialized::NamedAffineMap;
use mlir::dialects::IOperation;
use mlir::dialects::affine::Map as AffineMap;
use mlir::dialects::func::Return;
use mlir::dialects::vector::InBounds;
use mlir::dialects::vector::PermutationMap;
use mlir::dialects::vector::TransferWrite;
use mlir::ir::Block;
use mlir::ir::Shape;
use mlir::ir::ShapeImpl;
use mlir::types::IType;
use mlir::types::float::Float as FloatType;
use mlir::types::float::Layout as FloatLayout;
use mlir::types::index::Index;
use mlir::types::ranked_tensor::RankedTensor;
use mlir::types::shaped::Shaped;
use mlir::types::vector::Vector;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let t = FloatType::new(&context, FloatLayout::F32).as_type();
    let t_index = Index::new(&context).as_type();
    let dyn_size = Shaped::dynamic_size();
    let s_out = ShapeImpl::from(vec![dyn_size; 2]);
    let s_in = ShapeImpl::from(vec![4, 3]);
    let s_in_full = ShapeImpl::from(vec![1, 1, 4, 3]);
    let t_vec_in = Vector::new(&s_in, &t).as_type();
    let t_vec_in_full = Vector::new(&s_in_full, &t).as_type();
    let t_tnsr_out = RankedTensor::new(&s_out, &t_vec_in);
    let f = get_empty_test_fn(
        &context,
        &[
            t_tnsr_out.as_type(),
            t_index.clone(),
            t_index.clone(),
            t_vec_in_full.clone(),
        ],
        &[t_tnsr_out.as_type()],
    );
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let bounds_attr = InBounds::new(&context, &[false, false]);
    let map = AffineMap::new_identity(&context, s_out.rank());
    let perm_attr = PermutationMap::new(&map);
    let mut op_write = TransferWrite::new_tensor(
        &t_tnsr_out,
        &bounds_attr,
        &perm_attr,
        &f_block.get_arg(3),
        &f_block.get_arg(0),
        &[f_block.get_arg(1), f_block.get_arg(2)],
        None,
        &loc,
    )
    .as_operation();
    let mut op_ret = Return::new(&f, &[op_write.get_result(0)], &loc).as_operation();
    f_block.append_operation(&mut op_write);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    module.as_operation().dump();
    Ok(())
}
