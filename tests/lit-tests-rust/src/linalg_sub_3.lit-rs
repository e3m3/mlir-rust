// RUN: %O/run linalg_sub_3 2>&1 | @mlir-opt | @filecheck %M/linalg_sub_3.mlir --check-prefix=CHECK_CAN

extern crate mlir;

use crate::common::*;

use mlir::dialects::IROperation;
use mlir::dialects::func::Return;
use mlir::dialects::linalg::Sub;
use mlir::dialects::tensor::Empty;
use mlir::ir::Block;
use mlir::ir::ShapeImpl;
use mlir::types::IRType;
use mlir::types::integer::Integer as IntegerType;
use mlir::types::ranked_tensor::RankedTensor;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let dims: Vec<i64> = vec![8, 16];
    let s = ShapeImpl::from(dims);
    let t_elem = IntegerType::new(&context, 64);
    let t = RankedTensor::new(&s, &t_elem.as_type());
    let f = get_empty_test_fn(&context, &[t.as_type(), t.as_type()], &[t.as_type()]);
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let mut op_tensor_empty = Empty::new(&t, &[], &loc).as_operation();
    let mut op_sub = Sub::new_tensor(
        &t,
        &f_block.get_arg(0),
        &f_block.get_arg(1),
        &op_tensor_empty.get_result(0),
        &loc,
    )
    .as_operation();
    let mut op_ret = Return::new(&f, &[op_sub.get_result(0)], &loc).as_operation();
    f_block.append_operation(&mut op_tensor_empty);
    f_block.append_operation(&mut op_sub);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    module.as_operation().dump();
    Ok(())
}
