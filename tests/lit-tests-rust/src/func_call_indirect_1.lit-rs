// RUN: %O/run func_call_indirect_1 | @mlir-opt --canonicalize | @filecheck %M/func_call_indirect_1.mlir --check-prefix=CHECK_CAN
// COM: The `--canonicalize` flag for `mlir-opt` is called explicitly here to factor out
// COM: the function constant value to match `func_call_indirect_1.mlir`.

extern crate mlir;

use crate::common::*;

use mlir::dialects::IOperation;
use mlir::dialects::func::CallIndirect;
use mlir::dialects::func::Constant;
use mlir::dialects::func::Return;
use mlir::ir::Block;
use mlir::types::IType;
use mlir::types::float::Float as FloatType;
use mlir::types::float::Layout as FloatLayout;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let t = FloatType::new(&context, FloatLayout::F64).as_type();
    let f = get_empty_test_fn(&context, &[t.clone(), t.clone()], &[t.clone()]);
    let f_callee = get_private_fn(
        &context,
        "callee",
        &[t.clone(), t.clone()],
        &[t.clone()],
        None,
        None,
    );
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let mut op_constant = Constant::new(&f_callee, &loc).as_operation();
    let mut op_call = CallIndirect::new(
        &op_constant.get_result(0),
        &[f_block.get_arg(0), f_block.get_arg(1)],
        &loc,
    )
    .as_operation();
    let mut op_ret = Return::new(&f, &[op_call.get_result(0)], &loc).as_operation();
    f_block.append_operation(&mut op_constant);
    f_block.append_operation(&mut op_call);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f_callee.as_operation());
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    println!("{}", module);
    Ok(())
}
