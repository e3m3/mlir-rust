// RUN: %O/run affine_apply_1 2>&1 | @mlir-opt --canonicalize | @filecheck %M/affine_apply_1.mlir --check-prefix=CHECK_CAN
// COM: No dialect handle for affine is exposed, so make sure to load all available dialects before
// COM: constructing the apply operation from the affine dialect namespace.

extern crate mlir;

use crate::common::*;

use mlir::dialects::IOperation;
use mlir::dialects::func::Return;
use mlir::dialects::affine::Apply;
use mlir::dialects::affine::Binary as AffineBinop;
use mlir::dialects::affine::Constant as AffineConstant;
use mlir::dialects::affine::Dim as AffineDim;
use mlir::dialects::affine::IExpr;
use mlir::dialects::affine::Map as AffineMap;
use mlir::ir::Block;
use mlir::types::IType;
use mlir::types::index::Index;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let mut context = module.get_context();
    context.load_all_available_dialects();
    let loc = context.get_unknown_location();
    let t = Index::new(&context).as_type();
    let f = get_empty_test_fn(&context, &[t.clone(), t.clone()], &[t.clone()]);
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let d0 = AffineDim::new(&context, 0).as_expr();
    let d1 = AffineDim::new(&context, 1).as_expr();
    let c8 = AffineConstant::new(&context, 8).as_expr();
    let c128 = AffineConstant::new(&context, 128).as_expr();
    let b0 = AffineBinop::new_floor_div(d0, c8).as_expr();
    let b1 = AffineBinop::new_floor_div(d1, c128).as_expr();
    let b2 = AffineBinop::new_add(b0, b1).as_expr();
    let map = AffineMap::new_results(&context, 2, 0, &[b2]);
    let mut op_apply = Apply::new(
        &context,
        map,
        &[f_block.get_arg(0), f_block.get_arg(1)],
        &loc,
    )
    .as_operation();
    let mut op_ret = Return::new(&f, &[op_apply.get_result(0)], &loc).as_operation();
    f_block.append_operation(&mut op_apply);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    module.as_operation().dump();
    Ok(())
}
