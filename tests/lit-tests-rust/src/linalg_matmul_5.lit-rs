// RUN: %O/run linalg_matmul_5 2>&1 | @mlir-opt --canonicalize | @filecheck %M/linalg_matmul_5.mlir --check-prefix=CHECK_CAN

extern crate mlir;

use crate::common::*;

use mlir::dialects::IOperation;
use mlir::dialects::func::Return;
use mlir::dialects::linalg::CastKind;
use mlir::dialects::linalg::Matmul;
use mlir::dialects::linalg::TransformShape;
use mlir::dialects::tensor::Empty;
use mlir::ir::Block;
use mlir::ir::ShapeImpl;
use mlir::types::IType;
use mlir::types::integer::Integer as IntegerType;
use mlir::types::ranked_tensor::RankedTensor;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let s_a = ShapeImpl::from(vec![3, 5]);
    let s_b = ShapeImpl::from(vec![5, 7]);
    let s_out = ShapeImpl::from(s_a.matmul(&s_b).unwrap_or_default());
    let t_elem = IntegerType::new(&context, 64);
    let t_a = RankedTensor::new(&s_a, &t_elem.as_type());
    let t_b = RankedTensor::new(&s_b, &t_elem.as_type());
    let t_out = RankedTensor::new(&s_out, &t_elem.as_type());
    let f = get_empty_test_fn(
        &context,
        &[t_a.as_type(), t_b.as_type()],
        &[t_out.as_type()],
    );
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let mut op_empty = Empty::new(&t_out, &[], &loc).as_operation();
    let mut op_matmul = Matmul::new_tensor(
        &t_out,
        &f_block.get_arg(0),
        &f_block.get_arg(1),
        &op_empty.get_result(0),
        None,
        Some(CastKind::Unsigned),
        &loc,
    )
    .as_operation();
    let mut op_ret = Return::new(&f, &[op_matmul.get_result(0)], &loc).as_operation();
    f_block.append_operation(&mut op_empty);
    f_block.append_operation(&mut op_matmul);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    module.as_operation().dump();
    Ok(())
}
