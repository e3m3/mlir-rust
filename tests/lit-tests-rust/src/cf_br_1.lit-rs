// RUN: %O/run cf_br_1 | @mlir-opt --mlir-print-op-generic | @filecheck %M/cf_br_1.mlir --check-prefix=CHECK_GEN

// COM: Match against the generic MLIR as the canonicalized version optimizes out the target
// COM: branch of the `br` operation.

extern crate mlir;

use crate::common::*;

use mlir::dialects::IOperation;
use mlir::dialects::cf::Assert;
use mlir::dialects::cf::Branch;
use mlir::dialects::func::Return;
use mlir::ir::Block;
use mlir::ir::StringBacked;
use mlir::types::IType;
use mlir::types::float::Float as FloatType;
use mlir::types::float::Layout as FloatLayout;
use mlir::types::integer::Integer as IntegerType;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let t_bool = IntegerType::new_bool(&context).as_type();
    let t_f32 = FloatType::new(&context, FloatLayout::F32).as_type();
    let f = get_empty_test_fn(&context, &[t_bool.clone(), t_f32.clone()], &[t_f32.clone()]);
    let mut f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block_0 = f_region.iter().next().unwrap_or_default();
    let message = StringBacked::from("Expected condition to be true");
    let mut f_block_1 = Block::new(1, &[t_f32.clone()], &[loc.clone()]);
    let mut op_assert = Assert::new(
        &context,
        &f_block_0.get_arg(0),
        &message.as_string_ref(),
        &loc,
    )
    .as_operation();
    let mut op_br = Branch::new(&context, &[f_block_0.get_arg(1)], &f_block_1, &loc).as_operation();
    let mut op_ret = Return::new(&f, &[f_block_1.get_arg(0)], &loc).as_operation();
    f_block_0.append_operation(&mut op_assert);
    f_block_0.append_operation(&mut op_br);
    f_block_1.append_operation(&mut op_ret);
    f_region.append_block(&mut f_block_1);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    println!("{}", module);
    Ok(())
}
