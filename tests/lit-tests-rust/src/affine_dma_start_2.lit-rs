// RUN: %O/run affine_dma_start_2 | @mlir-opt --canonicalize | @filecheck %M/affine_dma_start_2.mlir --check-prefix=CHECK_CAN
// COM: No dialect handle for affine is exposed, so make sure to load all available dialects before
// COM: constructing the apply operation from the affine dialect namespace.

extern crate mlir;

use crate::common::*;

use mlir::dialects::IOperation;
use mlir::dialects::affine::Binary as AffineBinop;
use mlir::dialects::affine::Constant as AffineConstant;
use mlir::dialects::affine::Dim as AffineDim;
use mlir::dialects::affine::DmaStart;
use mlir::dialects::affine::IExpr;
use mlir::dialects::affine::Map as AffineMap;
use mlir::dialects::common::IntegerMemorySpace;
use mlir::dialects::func::Return;
use mlir::ir::Block;
use mlir::ir::ShapeImpl;
use mlir::types::IType;
use mlir::types::float::Float as FloatType;
use mlir::types::float::Layout as FloatLayout;
use mlir::types::index::Index;
use mlir::types::integer::Integer as IntegerType;
use mlir::types::memref::MemRef;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let mut context = module.get_context();
    context.load_all_available_dialects();
    let loc = context.get_unknown_location();
    let t_index = Index::new(&context).as_type();
    let t_float = FloatType::new(&context, FloatLayout::F32).as_type();
    let t_int = IntegerType::new(&context, 32).as_type();
    let s_source = ShapeImpl::from(vec![40, 128]);
    let s_tagbuf = ShapeImpl::from(vec![1]);
    let s_target = ShapeImpl::from(vec![2, 1024]);
    let t_mr_source =
        MemRef::new_contiguous(&s_source, &t_float, &IntegerMemorySpace::new(&context, 0))
            .as_type();
    let t_mr_tagbuf =
        MemRef::new_contiguous(&s_tagbuf, &t_int, &IntegerMemorySpace::new(&context, 2)).as_type();
    let t_mr_target =
        MemRef::new_contiguous(&s_target, &t_float, &IntegerMemorySpace::new(&context, 1))
            .as_type();
    let f = get_empty_test_fn(
        &context,
        &[
            t_index.clone(),
            t_mr_source.clone(),
            t_mr_target.clone(),
            t_mr_tagbuf.clone(),
            t_index.clone(),
            t_index.clone(),
            t_index.clone(),
            t_index.clone(),
            t_index.clone(),
            t_index.clone(),
            t_index.clone(),
        ],
        &[],
    );
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let d0 = AffineDim::new(&context, 0).as_expr();
    let d1 = AffineDim::new(&context, 1).as_expr();
    let c3 = AffineConstant::new(&context, 3).as_expr();
    let c7 = AffineConstant::new(&context, 7).as_expr();
    let b0 = AffineBinop::new_add(d0, c3).as_expr();
    let b1 = AffineBinop::new_add(d0, c7).as_expr();
    let map_source = AffineMap::new_results(&context, 2, 0, &[b0, d1]);
    let map_target = AffineMap::new_results(&context, 2, 0, &[b1, d1]);
    let mut op_start = DmaStart::new_strided(
        &context,
        map_source,
        map_target,
        &f_block.get_arg(0),
        &f_block.get_arg(1),
        &f_block.get_arg(2),
        &f_block.get_arg(3),
        &[f_block.get_arg(4), f_block.get_arg(5)],
        &[f_block.get_arg(6), f_block.get_arg(7)],
        &f_block.get_arg(8),
        &f_block.get_arg(9),
        &f_block.get_arg(10),
        &loc,
    )
    .as_operation();
    let mut op_ret = Return::new(&f, &[], &loc).as_operation();
    f_block.append_operation(&mut op_start);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    println!("{}", module);
    Ok(())
}
