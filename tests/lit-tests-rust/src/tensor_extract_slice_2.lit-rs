// RUN: %O/tensor_extract_slice_2 2>&1 | @mlir-opt | @filecheck %M/tensor_extract_slice_2.mlir --check-prefix=CHECK_CAN

extern crate mlir;

use mlir::attributes::specialized::NamedI64DenseArray;
use mlir::dialects::IROperation;
use mlir::dialects::common::StaticOffsets;
use mlir::dialects::common::StaticSizes;
use mlir::dialects::common::StaticStrides;
use mlir::dialects::func::Return;
use mlir::dialects::tensor::ExtractSlice;
use mlir::ir::Block;
use mlir::ir::ShapeImpl;
use mlir::types::IRType;
use mlir::types::float::Float as FloatType;
use mlir::types::float::Layout as FloatLayout;
use mlir::types::index::Index;
use mlir::types::ranked_tensor::RankedTensor;
use mlir::types::shaped::Shaped;

mod common;
use crate::common::*;

pub fn main() -> () {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let t = FloatType::new(&context, FloatLayout::F32).as_type();
    let t_index = Index::new(&context).as_type();
    let dyn_size = Shaped::dynamic_size();
    let s_in = ShapeImpl::from(vec![8, 16, 4]);
    let s_out = ShapeImpl::from(vec![1, dyn_size]);
    let t_tnsr_in = RankedTensor::new(&s_in, &t);
    let t_tnsr_out = RankedTensor::new(&s_out, &t);
    let f = get_empty_test_fn(
        &context,
        &[
            t_tnsr_in.as_type(),
            t_index.clone(),
            t_index.clone(),
            t_index.clone(),
            t_index.clone(),
        ],
        &[t_tnsr_out.as_type()],
    );
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let static_offsets = StaticOffsets::new(&context, &[dyn_size, 4, dyn_size]);
    let static_sizes = StaticSizes::new(&context, &[1, dyn_size, 1]);
    let static_strides = StaticStrides::new(&context, &[1, dyn_size, 1]);
    let mut op_extract = ExtractSlice::new(
        &t_tnsr_out,
        &f_block.get_arg(0),
        &[f_block.get_arg(1), f_block.get_arg(2)],
        &[f_block.get_arg(3)],
        &[f_block.get_arg(4)],
        &static_offsets,
        &static_sizes,
        &static_strides,
        &loc,
    )
    .as_operation();
    let mut op_ret = Return::new(&f, &[op_extract.get_result(0)], &loc).as_operation();
    f_block.append_operation(&mut op_extract);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    module.as_operation().dump();
}
