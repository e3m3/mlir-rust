// RUN: %O/vector_print_1 2>&1 | @mlir-opt | @filecheck %M/vector_print_1.mlir --check-prefix=CHECK_CAN

extern crate mlir;

use mlir::attributes::specialized::NamedString;
use mlir::dialects::func::Return;
use mlir::dialects::IROperation;
use mlir::dialects::vector::Print;
use mlir::dialects::vector::StringLiteral;
use mlir::ir::Block;
use mlir::ir::StringBacked;

mod common;
use crate::common::*;

pub fn main() -> () {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let f = get_empty_test_fn(&context, &[], &[]);
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let message = StringBacked::from("Hello World!");
    let attr = StringLiteral::new(&context, &message.as_string_ref());
    let mut op_print = Print::new_string(&context, &attr, &loc).as_operation();
    let mut op_ret = Return::new(&f, &[], &loc).as_operation();
    f_block.append_operation(&mut op_print);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    module.as_operation().dump();
}
