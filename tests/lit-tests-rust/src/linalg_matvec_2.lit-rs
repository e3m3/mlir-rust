// RUN: %O/linalg_matvec_2 2>&1 | @mlir-opt | @filecheck %M/linalg_matvec_2.mlir --check-prefix=CHECK_CAN

extern crate mlir;

use mlir::dialects::common::DefaultMemorySpace;
use mlir::dialects::func::Return;
use mlir::dialects::IROperation;
use mlir::dialects::linalg::Matvec;
use mlir::dialects::linalg::TransformShape;
use mlir::dialects::memref::Alloc;
use mlir::ir::Block;
use mlir::ir::ShapeImpl;
use mlir::types::IRType;
use mlir::types::float::Float as FloatType;
use mlir::types::float::Layout as FloatLayout;
use mlir::types::memref::MemRef;

mod common;
use crate::common::*;

pub fn main() -> () {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let s_mat = ShapeImpl::from(vec![8, 16]);
    let s_vec = ShapeImpl::from(vec![16]);
    let s_out = ShapeImpl::from(s_mat.matvec(&s_vec).unwrap());
    let t_elem = FloatType::new(&context, FloatLayout::F32);
    let mem_space = DefaultMemorySpace::new();
    let t_mat = MemRef::new_contiguous(&s_mat, &t_elem.as_type(), &mem_space);
    let t_vec = MemRef::new_contiguous(&s_vec, &t_elem.as_type(), &mem_space);
    let t_out = MemRef::new_contiguous(&s_out, &t_elem.as_type(), &mem_space);
    let f = get_empty_test_fn(&context, &[t_mat.as_type(), t_vec.as_type()], &[t_out.as_type()]);
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let mut op_alloc = Alloc::new(&t_out, &[], &[], None, &loc).as_operation();
    let mut op_matvec = Matvec::new_memref(
        &context,
        &f_block.get_arg(0),
        &f_block.get_arg(1),
        &op_alloc.get_result(0),
        &loc,
    ).as_operation();
    let mut op_ret = Return::new(&f, &[op_alloc.get_result(0)], &loc).as_operation();
    f_block.append_operation(&mut op_alloc);
    f_block.append_operation(&mut op_matvec);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    module.as_operation().dump();
}
