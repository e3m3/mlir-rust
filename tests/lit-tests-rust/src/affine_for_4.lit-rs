// RUN: %O/run affine_for_4 | @mlir-opt --canonicalize | @filecheck %M/affine_for_4.mlir --check-prefix=CHECK_CAN
// COM: No dialect handle for affine is exposed, so make sure to load all available dialects before
// COM: constructing operations from the affine dialect namespace.

extern crate mlir;

use crate::common::*;

use mlir::attributes::specialized::NamedSymbolRef;
use mlir::dialects::IOperation;
use mlir::dialects::affine::Constant as AffineConstant;
use mlir::dialects::affine::For;
use mlir::dialects::affine::IExpr;
use mlir::dialects::affine::Map as AffineMap;
use mlir::dialects::affine::Symbol as AffineSymbol;
use mlir::dialects::affine::Yield;
use mlir::dialects::func::Call;
use mlir::dialects::func::Callee;
use mlir::dialects::func::Return;
use mlir::ir::Block;
use mlir::types::IType;
use mlir::types::index::Index;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let mut context = module.get_context();
    context.load_all_available_dialects();
    let loc = context.get_unknown_location();
    let t = Index::new(&context).as_type();
    let f = get_empty_test_fn(&context, &[t.clone(), t.clone(), t.clone(), t.clone()], &[]);
    let f_bb = get_private_fn(&context, "black_box", &[t.clone()], &[], None, None);
    let c10 = AffineConstant::new(&context, 10).as_expr();
    let c100 = AffineConstant::new(&context, 100).as_expr();
    let s0 = AffineSymbol::new(&context, 0).as_expr();
    let s1 = AffineSymbol::new(&context, 1).as_expr();
    let map0 = AffineMap::new_results(&context, 0, 2, &[s0, s1, c10]);
    let map1 = AffineMap::new_results(&context, 0, 2, &[s0, s1, c100]);
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let callee = Callee::from_symbol_ref(&f_bb.get_symbol_ref());
    let op_for = For::new(
        &context,
        &[],
        &[f_block.get_arg(0), f_block.get_arg(2)],
        &[f_block.get_arg(1), f_block.get_arg(3)],
        &[],
        map0,
        map1,
        1,
        &loc,
    );
    let region_for = op_for.as_operation().get_region(0);
    let mut block_for = region_for.iter().next().unwrap_or_default();
    let mut op_call = Call::new(&callee, &[], &[block_for.get_arg(0)], &loc).as_operation();
    let mut op_yield = Yield::new_for(&[], &op_for, &loc).as_operation();
    block_for.append_operation(&mut op_call);
    block_for.append_operation(&mut op_yield);
    let mut op_ret = Return::new(&f, &[], &loc).as_operation();
    f_block.append_operation(&mut op_for.as_operation());
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f_bb.as_operation());
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    println!("{}", module);
    Ok(())
}
