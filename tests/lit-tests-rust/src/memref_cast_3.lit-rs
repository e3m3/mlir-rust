// RUN: %O/run memref_cast_3 2>&1 | @mlir-opt | @filecheck %M/memref_cast_3.mlir --check-prefix=CHECK_CAN

extern crate mlir;

use crate::common::*;

use mlir::attributes::strided_layout::StridedLayout;
use mlir::dialects::IOperation;
use mlir::dialects::common::DefaultMemorySpace;
use mlir::dialects::common::MemoryLayout;
use mlir::dialects::func::Return;
use mlir::dialects::memref::Cast;
use mlir::ir::Block;
use mlir::ir::ShapeImpl;
use mlir::types::IType;
use mlir::types::float::Float as FloatType;
use mlir::types::float::Layout as FloatLayout;
use mlir::types::memref::MemRef;
use mlir::types::shaped::Shaped;

pub fn test() -> TestResult {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let t = FloatType::new(&context, FloatLayout::F32).as_type();
    let s_in = ShapeImpl::from(vec![12, 4]);
    let s_out = ShapeImpl::from(vec![12, 4]);
    let dyn_size = Shaped::dynamic_size();
    let layout_in = MemoryLayout::from(StridedLayout::new(&context, dyn_size, &[dyn_size; 2]));
    let layout_out = MemoryLayout::from(StridedLayout::new(&context, 5, &[4, 1]));
    let t_mr_in = MemRef::new(&s_in, &t, &layout_in, &DefaultMemorySpace::new());
    let t_mr_out = MemRef::new(&s_out, &t, &layout_out, &DefaultMemorySpace::new());
    let f = get_empty_test_fn(&context, &[t_mr_in.as_type()], &[t_mr_out.as_type()]);
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let mut op_cast =
        Cast::new_ranked::<DefaultMemorySpace>(&t_mr_out, &f_block.get_arg(0), &loc).as_operation();
    let mut op_ret = Return::new(&f, &[op_cast.get_result(0)], &loc).as_operation();
    f_block.append_operation(&mut op_cast);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    module.as_operation().dump();
    Ok(())
}
