// RUN: %O/vector_extract_1 2>&1 | @mlir-opt | @filecheck %M/vector_extract_1.mlir --check-prefix=CHECK_CAN

extern crate mlir;

use mlir::attributes::specialized::NamedI64DenseArray;
use mlir::dialects::func::Return;
use mlir::dialects::IROperation;
use mlir::dialects::vector::Extract;
use mlir::dialects::vector::StaticPosition;
use mlir::ir::Block;
use mlir::ir::ShapeImpl;
use mlir::types::float::Float as FloatType;
use mlir::types::float::Layout as FloatLayout;
use mlir::types::index::Index;
use mlir::types::IRType;
use mlir::types::vector::Vector;

mod common;
use crate::common::*;

pub fn main() -> () {
    let mut module = get_module(&get_registry());
    let context = module.get_context();
    let loc = context.get_unknown_location();
    let t = FloatType::new(&context, FloatLayout::F32).as_type();
    let t_index = Index::new(&context).as_type();
    let s_in = ShapeImpl::from(vec![4, 8, 16]);
    let s_out = ShapeImpl::from(vec![16]);
    let t_vec_in = Vector::new(&s_in, &t).as_type();
    let t_vec_out = Vector::new(&s_out, &t).as_type();
    let static_pos = StaticPosition::new(&context, &[2, StaticPosition::symbolic_pos()]);
    let f = get_empty_test_fn(&context, &[t_vec_in.clone(), t_index.clone()], &[t_vec_out.clone()]);
    let f_region = f.as_operation().iter().next().unwrap_or_default();
    let mut f_block = f_region.iter().next().unwrap_or_default();
    let mut op_extract = Extract::new(
        &t_vec_out,
        &f_block.get_arg(0),
        &[f_block.get_arg(1)],
        &static_pos,
        &loc,
    ).as_operation();
    let mut op_ret = Return::new(&f, &[op_extract.get_result(0)], &loc).as_operation();
    f_block.append_operation(&mut op_extract);
    f_block.append_operation(&mut op_ret);
    let mut block = Block::new_empty();
    block.append_operation(&mut f.as_operation());
    module.take_body(&mut block);
    module.as_operation().dump();
}
